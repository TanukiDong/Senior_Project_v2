<launch>
    <arg name="world" default="empty" />
    <arg name="mode" default="default" />
    <arg name="small" default="0"/>
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0.5"/>

    <!-- Spawn coordinates decided by world -->
    <arg name="x_"
         default="$(eval {'turtle': -2.0,
                          'house' : -2.0,
                          'eng3'  : 50.0}.get(arg('world'), arg('x')))"/>

    <arg name="y_"
         default="$(eval {'turtle':  0.0,
                          'house' :  1.0,
                          'eng3'  : -3.0}.get(arg('world'), arg('y')))"/>

    <!-- Robot Model -->
    <arg name="robot_dir" default="$(find homewhere)/urdf"/>
    <arg name="model"
         default="$(eval arg('robot_dir') +
                         ('/box_robot.small.xacro'
                          if int(arg('small')) == 1
                          else '/box_robot.xacro'))"/>

    <!-- Robot Description -->
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

    <!-- Launch an empty Gazebo world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="false" />
        <arg name="use_sim_time" value="true" />
        <arg name="world_name" value="$(find homewhere)/world/$(arg world).world" />
    </include>

    <!-- Spawn the robot into Gazebo -->
    <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -param robot_description -model homewhere -x $(arg x_) -y $(arg y_) -z $(arg z)"
        output="screen" />

    <!-- Launch Control Node -->
    <node name="control" pkg="homewhere" type="control.py" output="screen" />
    <!-- Movement Publisher -->
    <node name="odometry" pkg="homewhere" type="odometry.py" output="screen" />

    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"
    /> -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <node name="marker" pkg="homewhere" type="marker.py" output="screen" />

    <!-- SLAM: Gmapping -->
    <group if="$(eval arg('mode') == 'slam')">
        <include file="$(find homewhere)/launch/slam.launch" />
    </group>

    <!-- Navigation -->
    <group if="$(eval arg('mode') == 'nav')">
        <include file="$(find homewhere)/launch/navigation.launch">
            <arg name="map_file" value="$(find homewhere)/map/$(arg world)/map.yaml" />
        </include>
    </group>

</launch>