<launch>
    <arg name="x" default="-2.0" />
    <arg name="y" default="1.0" />
    <arg name="z" default="0.5" />

    <!-- -2 0 for turtle -->
    <!-- -2 1 for house -->
    <!-- 50 -3 1 for eng3 -->

    <arg name="world" default="turtle" />
    <!-- <arg name="world" default="empty"/> -->
    <!-- <arg name="world" default="gas_station"/> -->

    <arg name="mode" default="default" />

    <!-- Argument to pass the Xacro file path -->
    <!-- <arg name="model" default="$(find homewhere)/urdf/box_robot.small.xacro" /> -->
    <arg name="model" default="$(find homewhere)/urdf/box_robot.xacro" />

    <!-- Robot Description -->
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

    <!-- Launch an empty Gazebo world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="false" />
        <arg name="use_sim_time" value="true" />
        <arg name="world_name" value="$(find homewhere)/world/$(arg world).world" />
    </include>

    <!-- Spawn the robot into Gazebo -->
    <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -param robot_description -model homewhere -x $(arg x) -y $(arg y) -z $(arg z)"
        output="screen" />

    <!-- Launch Control Node -->
    <node name="control" pkg="homewhere" type="control.py" output="screen" />
    <!-- Movement Publisher -->
    <node name="odometry" pkg="homewhere" type="odometry.py" output="screen" />

    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- SLAM: Gmapping -->
    <group if="$(eval arg('mode') == 'slam')">
        <include file="$(find homewhere)/launch/slam.launch" />
    </group>

    <!-- Navigation -->
    <group if="$(eval arg('mode') == 'nav')">
        <include file="$(find homewhere)/launch/navigation.launch">
            <arg name="map_file" value="$(find homewhere)/map/$(arg world)/map.yaml" />
        </include>
    </group>

</launch>