<launch>
    <arg name="mode" default="default" />
    <!-- Robot -->
    <arg name="model" default="$(find homewhere)/urdf/box_robot.small.nolidar.xacro" />
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />
    <!-- LiDAR -->
    <include file="$(find hls_lfcd_lds_driver)/launch/hlds_laser.launch" />

    <!-- Launch Control Node -->
    <node name="control" pkg="homewhere" type="control.py" output="screen" />
    <!-- Movement Publisher -->
    <node name="odometry" pkg="homewhere" type="odometry.py" output="screen" />

    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"
    /> -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- SLAM: Gmapping -->
    <group if="$(eval arg('mode') == 'slam')">
        <!-- Gmapping -->
        <node pkg="gmapping" type="slam_gmapping" name="turtlebot3_slam_gmapping" output="screen">
            <param name="base_frame" value="base_link" />
            <param name="odom_frame" value="odom" />
            <param name="map_frame" value="map" />
            <rosparam command="load" file="$(find homewhere)/config/gmapping_params.yaml" />
        </node>

        <!-- Launch RViz for visualization -->
        <node name="rviz" pkg="rviz" type="rviz" required="true" output="screen"
            args="-d $(find homewhere)/rviz/slam.rviz" />
    </group>

    <!-- Navigation -->
    <group if="$(eval arg('mode') == 'nav')">
        <include file="$(find homewhere)/launch/navigation.launch">
            <arg name="map_file" value="$(find homewhere)/map/$(arg world)/map.yaml" />
        </include>
    </group>

</launch>