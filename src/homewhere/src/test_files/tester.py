#!/usr/bin/env python
import rospy
import math
from geometry_msgs.msg import PoseWithCovarianceStamped, Twist
from std_msgs.msg import Int16
from threading import Event
import time

# from progress report II, as well as some extra experiments
# it is clear that the RPM generated by the hub servo motors are extremely precise
# therefore, we use time*velocity on a flat ground instead of distance

pose_data = None
pose_received = Event()

def pose_callback(msg):
    global pose_data
    pose_data = msg
    pose_received.set()

def print_pose(tag):
    if pose_data:
        pos = pose_data.pose.pose.position
        ori = pose_data.pose.pose.orientation
        print(f"\n[{tag}]")
        print(f"Position: x={pos.x:.2f}, y={pos.y:.2f}")
        print(f"Orientation: x={ori.x:.2f}, y={ori.y:.2f}, z={ori.z:.2f}, w={ori.w:.2f}")

def main():
    rospy.init_node('localization_test')
    cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
    angle_pub = rospy.Publisher('/cmd_angle', Int16, queue_size=10)
    rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, pose_callback)

    # Ask user for input
    move_time = float(input("Enter time in seconds to move: "))
    angle_deg = float(input("Enter cmd_angle (deg): "))
    angle_rad = math.radians(angle_deg)

    rospy.loginfo("Waiting for initial AMCL pose...")
    pose_received.wait(timeout=5)
    print_pose("Before Move")

    # Set angle
    angle_pub.publish(int(angle_deg))
    time.sleep(0.2)

    # Publish movement command
    v = 0.1  # fixed speed
    twist = Twist()
    twist.linear.x = v * math.cos(angle_rad)
    twist.linear.y = v * math.sin(angle_rad)


    rate = rospy.Rate(10)
    start_time = rospy.Time.now()
    rospy.loginfo("Starting movement...")
    while (rospy.Time.now() - start_time).to_sec() < move_time and not rospy.is_shutdown():
        cmd_vel_pub.publish(twist)
        rate.sleep()

    # Stop movement
    twist.linear.x = 0.0
    twist.linear.y = 0.0
    cmd_vel_pub.publish(twist)

    rospy.sleep(1.0)  # Let AMCL update
    print_pose("After Move")

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
